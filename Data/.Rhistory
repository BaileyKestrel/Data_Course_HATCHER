pwd
getwd()
list.files()
setwd()
setwd(/Data)
setwd(Data)
setwd(Data/)
setwd("~/Data")
?list.files()
# this is a string
echo 'this si 1st commit'
# this is a string
'this is 1st commit'
list.files(path = 'Assignments/')
list.files(path = 'Assignments/', recursive = T)
'this is how you type a string in R'
#
list.files(path = 'Data/', pattern = '.txt', recursive = T)
## how many total files under 'Data' directory, including subdirectories
length(list.files(path = 'Data/', pattern = '.txt', recursive = T))
## how many total files under 'Data' directory, including subdirectories
length(list.files(path = 'Data/', recursive = T))
list.files(path = 'Data/', recursive = T)
obj <- list.files(path = 'Data/', recursive = T)
obj <- list.files(path = 'Data/', recursive = T)
obj_1 <-  list.files((path = 'Assignments/'))
rm(path)
obj_1 <-  list.files((path = 'Assignments/'))
rm(path)
obj_1 <-  list.files(path = 'Assignments/')
no_of_files = length(obj_1) # store length of obj_1
echo 'some' # print on the screen
echo'some' # print on the screen
list.files(path = 'Data/', pattern = '.csv')
list.files(path = 'Data/', pattern = 'grade')
## file name start with something
list.files(path = 'Data/', pattern = '^b', recursive = T) # ^ means beginning with b
list.files(path = 'Data/', pattern = '^B')
# end with
list.files(path = 'Data/', pattern = 'b$', recursive = T) # $ means ending with
list.files(path = 'Data/', pattern = 'b?', recursive = T)
readLines('Data/cleaned_bird_data.csv')
# reads file line by line
readLines('Data/cleaned_bird_data.csv')
line <- readLines('Data/cleaned_bird_data.csv')
length(line)
length(line)
readLines('Data/wide_income_rent.csv')
line <- readLines('Data/wide_income_rent.csv')
length(line)
read.csv('Data/wide_income_rent.csv')
## read a file and savve into an object
df_rent_by_state = read.csv('Data/wide_income_rent.csv')
dim(df_rent_by_state)
# how to tell R this is not a header
df_rent_by_state = read.csv('Data/wide_income_rent.csv', header = F)
dim(df_rent_by_state)
df_rent_by_state = read.csv('Data/wide_income_rent.csv', row.names = 1)
dim(df_rent_by_state)
####Jan 21st####
dat <- iris
View(dat)
dim(dat) #150 5
head(dat)
tail(dat)
dat[3, 4]
View(dat)
new_dat <- dat[1:3, 1:4]
View(new_dat)
#vector
#1:3 #go in sequence 1, 2, 3
# c()
vec <- 1:3
vec <- 'apple', 'banana', 'kiwi'
vec <- c('apple', 'banana', 'kiwi')
#vector
#1:3 #go in sequence 1, 2, 3
# c()
vec <- c(1:3, 2:4)
vec <- c('apple', 'banana', 'kiwi')
#vector
#1:3 #go in sequence 1, 2, 3
# c()
vec_num <- c(1:3, 2:4)
vec_num
vec_num2 <-  c(1, 2, 3, 2, 3, 4)
cec_num[2]
vec_num[2]
# logical (TRUE/FALSE)
is.numeric(vec_num)
vec_mix <- c(1, 'apple', TRUE)
thre <- c(TRUE, TRUE, FALSE)
mat <- matrix(1:6, nrow = 3)
mat
mat[2, 1]
vec_num2 + 1
vec3 <-  vec_num2^2
as.character(vec_num2)
vec_num2
as.character(vec_num2) # can convert to character
vec_4 <-  as.character(vec_num2)
#convert back using as.numeric()
vec3 + as.numeric(vec_4)
as.factor(vec_num2)
sum(iris$Sepal.Length)
head(dat)
# vector
vec <- c(1, 2, 3, 4)
ar <- as.array(c(vec, c(5, 6, 7, 8)))
list <- list(1, 2, 3, 4)
list
array(1:3, c(2,4))
dat <-  as.data.frame(vec, vec_2)
list <- list(vec, vec_2)
vec_2 <- c(2, 3, 4)
vec_3 <- c(5, 6, 7, 8)
ar <- as.array(c(vec, c(5, 6, 7, 8)))
list <- list(1, 2, 3, 4)
array(1:3, c(2,4))
dat <-  as.data.frame(vec, vec_2)
list <- list(vec, vec_2)
for (index in c(1,2,3,4,5,6,7,8,9,10)) {
print(index)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
for(index in vec) {
new_score <- index + 1
print(new_score)
}
vec <- c('apple, 'banana', 'kiwi')
vec <- c('apple', 'banana', 'kiwi')
print(fruit)
print(out)
for (fruit in vec) {
out = paste('I like')
print(out)
}
for (fruit in vec){
print(fruit)
}
print(fruit)
vec <- c('apple', 'banana', 'kiwi')
for (fruit in vec){
print(fruit)
}
for (fruit in vec) {
out = paste('I like')
print(out)
}
fruit
fruit[2]
fruit[1]
# write a for loop to print out 1,2,3,4,5 and multiply by pi
for (i in c(1,2,3,4,5)){
new_value <- i * pi
print(new_value)
}
3*3.1415
for (i in vec){
for (j in vec_2){
out=paste('I like', j)
print(out)
print(i)
}
}
readLines('Data/data-shell/creatures/basiliskldat', n = 1)
readLines('Data/data-shell/data/pdb/benzaldehyde.pdb', n = 1)
readLines('Data/Messy_Take2/b_df.csv', n =1)
vec <- c(1, 2, 3)
bfile <- list.files('Data/', pattern = '^b', recursive = T)
readLines('Data/data-shell/creatures/basilisk.dat', n = 1)
cd
setwd("~/Desktop/BIOL3100/Data_Course_HATCHER/Data")
readLines('Data/data-shell/creatures/basilisk.dat', n = 1)
readLines('Data/data-shell/data/pdb/benzaldehyde.pdb', n = 1)
readLines('Data/Messy_Take2/b_df.csv', n =1)
setwd("~/Desktop/BIOL3100/Data_Course_HATCHER")
readLines('Data/data-shell/creatures/basilisk.dat', n = 1)
readLines('Data/data-shell/data/pdb/benzaldehyde.pdb', n = 1)
readLines('Data/Messy_Take2/b_df.csv', n =1)
vec <- c(1, 2, 3)
bfile <- list.files('Data/', pattern = '^b', recursive = T)
for(file in bfile){
filepath <- paste0('Data/', file)
#print(filepath)
first_line <- readLines(filepath, n = 1)
print(first_line)
}
## option 1
for(file in bfile){
setwd('~/Desktop/BIOL3100/Data_Course_HATCHER/Data')
first_line <- readLines(file, n = 1)
print(first_line)
}
getwd()
list.files(~/Desktop/BIOL3100/Data_Course_HATCHER/Data, pattern = '^b', recursive = T)
setwd(~/Desktop/BIOL3100/Data_Course_HATCHER/Data)
setwd(/Desktop/BIOL3100/Data_Course_HATCHER/Data)
setwd(Desktop/BIOL3100/Data_Course_HATCHER/Data)
setwd(./Data)
getwd()
getwd()
list.files(pattern = '^b', recursive = T)
print(.......
vec <- c(1,2,3,4,5,6,7,8,9,10)
list.files(pattern = '^B', recursive = T)
#review
arr <- array(1:18, dim = c(3,3,2)) # row, column, layer
arr
print(arr)
vec <- c(1,2,3)
is.vector(vec)
str(vec)
#numeric
vec*vec
#numeric
vec1 <- vec*vec
#logical
# character
chr <- as.character(vec)
str(chr)
chr[1]
chr[3]
data()
ff
mtcars
data(mtcars)
## build a data frame for 'mtcars' dataset'
mtcars
dat <- mtcars
dim(dat)
str(dat)
dim(dat) # 32 11
str(dat)
# get cars with cyl greater than 4
dat[,2] #grab every row with cyl greater than 4
# get cars with cyl greater than 4
dat[dat$cyl > 4] #grab every row with cyl greater than 4
# get cars with cyl greater than 4
dat[dat$cyl > 4,] #grab every row with cyl greater than 4
# get cars with cyl greater than 4
cyl_greater_4 <- dat[dat$cyl > 4,] #grab every row with cyl greater than 4
# get cars with cyl greater than 4
dat$cyl > 4
## pull out mpg data and calculate average, min, and max mpg
str(dat)
dat$mpg
## pull out mpg data and calculate average, min, and max mpg
str(dat)
car_mpg <- dat$mpg # $ collects column by name
mean(car_mpg)
summary(dat$mpg)
# option 2
dat[, c("mpg", "cyl")]
# option 2
dat[, c("mpg")]
# option 2... [] brackets can grab multiple columns
dat[, c("mpg", "cyl")]
dat[, c(1:2)]
# option 2... [] brackets can grab multiple columns
dat[, c("mpg", "cyl")]
# option 2... [] brackets can grab multiple columns
dat[2, c("mpg", "cyl")]
# option 2... [] brackets can grab multiple columns
dat[2:5, c("mpg", "cyl")]
## convert 'mpg' to character in mtcars data frame
str(dat)
as.character(dat$mpg)
str(dat)
as.character(dat$mpg)
str(dat$mpg)
## convert 'mpg' to character in mtcars data frame
str(dat$mpg)
## convert 'mpg' to character in mtcars data frame
str(dat)
## convert entire data frame to character
str(dat)
as.character(dat)
str(dat)
as.character(dat)
chr_dat <- as.character(dat)
str(chr_dat)
str(dat$mpg)
