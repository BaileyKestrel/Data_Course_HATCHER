print(fruit)
vec <- c('apple', 'banana', 'kiwi')
for (fruit in vec){
print(fruit)
}
for (fruit in vec) {
out = paste('I like')
print(out)
}
fruit
fruit[2]
fruit[1]
# write a for loop to print out 1,2,3,4,5 and multiply by pi
for (i in c(1,2,3,4,5)){
new_value <- i * pi
print(new_value)
}
3*3.1415
for (i in vec){
for (j in vec_2){
out=paste('I like', j)
print(out)
print(i)
}
}
len?
help(len)
?mean
?list.files
# Write a command that lists all of the .csv files found in the Data/ directory and stores that list in an object called “csv_files”
# recursive
?list.files
csv_files <- list.files(path = "./Data/", recursive = TRUE, pattern = ".csv")
View(csv_files)
head(csv_files)
csv_files <- list.files(path = "./Data/", recursive = TRUE, pattern = "\\.csv$")
head(csv_files)
csv_files <- list.files(path = "./Data/", pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
head(csv_files)
csv_files <- list.files(path = "./Data/", pattern = "\\.csv$", recursive = TRUE, full.names = FALSE)
head(csv_files)
length(csv_files)
num_csv_files <- length(csv_files)
print(num_csv_files)
# Open the wingspan_vs_mass.csv file and store the contents as an R object named “df” using the read.csv() function
print(csv_files)
?read.csv
read.csv(wingspan_vs_mass.csv)
read.csv("wingspan_vs_mass.csv")
read.csv("./Data/wingspan_vs_mass.csv")
df <- read.csv("./Data/wingspan_vs_mass.csv")
# Inspect the first 5 lines of this data set using the head() function
?head
head(df, 5)
View(df)
head(df, 5)
head(df, 5)
head(df, 5)
?list.files
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
list.files(path = "./Data/", pattern = "^b", recursive = TRUE)
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
list.files(path = "./Data/", pattern = "^b", recursive = FALSE)
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
list.files(path = "./Data/", pattern = "^b", recursive = TRUE)
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
list.files(path = "Data/", pattern = "^b", recursive = TRUE)
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
list.files(path = "./Data/", pattern = "^b", recursive = TRUE, full.names = FALSE)
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
list.files(path = "./Data/", pattern = "^b", recursive = TRUE, full.names = TRUE)
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
list.files(path = "./Data/", pattern = "^b", recursive = TRUE)
for i in b_files:
for (i in b_files):
for (i in b_files)
# Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
?readLines
# Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
?readLines
# Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
?readLines
# Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
?readLines
for (file in b_files){
first_line <- readLines(file, n = 1)
}
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
b_files <- list.files(path = "./Data/", pattern = "^b", recursive = TRUE)
# Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
?readLines
for (file in b_files){
first_line <- readLines(file, n = 1)
}
for (file in b_files) {
first_line <- readLines(file, n = 1)
}
# Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
b_files <- list.files(path = "./Data/", pattern = "^b", recursive = TRUE, full.names = TRUE)
for (file in b_files) {
first_line <- readLines(file, n = 1)
}
?cat
cat(first_line)
# Write a command that lists all of the .csv files found in the Data/ directory and stores that list in an object called “csv_files”
# recursive
?list.files
for (file in b_files) {
first_line <- readLines(file, n = 1)
cat(first_line)
}
cat(file, first_line)
for (file in b_files) {
print(file)
first_line <- readLines(file, n = 1)
cat(file, first_line)
}
print("file: ", file)
?print
cat("file: ", file)
first_line <- readLines(file, n = 1)
for (file in b_files) {
cat("file: ", file)
first_line <- readLines(file, n = 1)
cat(file, first_line)
}
cat("File: ", file, "\nFirst line: " first_line)
cat("File: ", file, "\nFirst line: ", first_line)
for (file in b_files) {
first_line <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line)
}
for (file in b_files) {
first_line <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line, "\n")
}
?print
for (file in b_files) {
first_line <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line, "\n")
}
first_line_b_file <- readLines(file, n = 1)
for (file in b_files) {
first_line_b_file <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_b_file, "\n")
}
for (file in b_files) {
first_line_b_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_b_file, "\n")
}
# Do the same thing for all files that end in “.csv”
for (file in csv_files) {
first_line_csv_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: " first_line_csv_files)
# Do the same thing for all files that end in “.csv”
for (file in csv_files) {
first_line_csv_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_csv_files)
}
csv_files <- list.files(path = "./Data/", pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
# Do the same thing for all files that end in “.csv”
for (file in csv_files) {
first_line_csv_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_csv_files)
}
# Do the same thing for all files that end in “.csv”
for (file in csv_files) {
first_line_csv_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_csv_files, "\n")
}
## load 'mtcars' dataset
mtcars
## load 'mtcars' dataset
format(mtcars)
?str
str(mtcars)
## 1. What type of object is this?
str(mtcars)
class(mtcars)
View(mtcars)
## load 'mtcars' dataset
mtcars
mtcars <- mtcars[mtcars$mpg > 20, ]
dim(mtcars)
## 2. Find cars with an mpg greater than 20 and 4 cyl,
## then save them to a new object
my_mtcars <- mtcars
# option 1:
my_mtcars <- my_mtcars[my_mtcars$mpg > 20, ]
my_mtcars <- my_mtcars[my_mtcars$cyl == 4, ]
# option 2:
my_mtcars <- my_mtcars[my_mtcars$mpg > 20 & my_mtcars$cyl == 4, ]
View(my_mtcars)
# option 2:
my_mtcars <- my_mtcars[my_mtcars$mpg > 20 & my_mtcars$cyl == 4, ] #[row, column] if a section is blank, we want everything from it
View(my_mtcars)
my_mtcars[my_mtcars$mpg > 20 & my_mtcars$cyl == 4, ]
## 3. convert mpg to a character data type.
my_mtcars$mpg <- as.character(my_mtcars$mpg)
str(my_mtcars)
## 3. convert mpg to a character data type.
my_mtcars$mpg <- as.character(my_mtcars$mpg)
str(my_mtcars)
my_mtcars$new_col <- as.numeric(my_mtcars$mpg)
str(my_mtcars)
my_mtcars$new_col <- as.numeric(my_mtcars$mpg) # creates new column and stores it in data set my_mtcars
str(my_mtcars)
my_mtcars$new_col <- my_mtcars$gear * my_mtcars$cyl
dat1 <- as.character(my_mtcars)
class(dat1)
for (col in names(my_mtcars)) {
print(col)
}
for (col in names(my_mtcars)) {
my_mtcars[, col] <- as.character(my_mtcars[, col])
}
str(my_mtcars)
# option 3: use the apply function
?apply
apply(my_mtcars, 2, as.character) # 1 indicates rows, 2 indicates columns (2: apply to all columns)
str(my_mtcars)
new_dat <- apply(mtcars, 2, as.character)
class(new_col)
class(new_dat)
class(new_dat_new_input)
# only use apply to change to character on rows 1 - 3:
new_input <- mtcars[1:3, ]
new_dat_new_input <- apply(new_input, 2, as.character)
class(new_dat_new_input)
class(new_dat_new_input)
new_dat <- as.data.frame(new_dat_new_input)
class(new_dat)
new_dat
write.csv(new_dat, 'class_practice_28Jan25.csv')
write.csv(new_dat, 'class_practice_28Jan25.csv', row.names = FALSE)
write.csv(new_dat, 'class_practice_28Jan25.csv', row.names = TRUE)
# how to install package in R
install.packages("tidyverse")
# how to install package in R
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
%>% # shift+Command+M
mtcars$mpg %>%
mean()
for (file in b_files) {
first_line_b_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_b_file, "\n")
}
# 8. Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
b_files <- list.files(path = "./Data/", pattern = "^b", recursive = TRUE, full.names = TRUE)
for (file in b_files) {
first_line_b_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_b_file, "\n")
}
for (file in b_files) {
first_line_b_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_b_files, "\n")
}
# 4. Write a command that lists all of the .csv files found in the Data/ directory and stores that list in an object called “csv_files”
csv_files <- list.files(path = "./Data/", pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
print(csv_files)
# 5. Find how many files match that description using the length() function
num_csv_files <- length(csv_files)
print(num_csv_files)
# 6. Open the wingspan_vs_mass.csv file and store the contents as an R object named “df” using the read.csv() function
df <- read.csv("./Data/wingspan_vs_mass.csv")
# 7. Inspect the first 5 lines of this data set using the head() function
head(df, 5)
# 8. Find any files (recursively) in the Data/ directory that begin with the letter “b” (lowercase)
b_files <- list.files(path = "./Data/", pattern = "^b", recursive = TRUE, full.names = TRUE)
# 9. Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
for (file in b_files) {
first_line_b_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_b_files, "\n")
}
# 10. Do the same thing for all files that end in “.csv”
for (file in csv_files) {
first_line_csv_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_csv_files, "\n")
}
# 9. Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
for (file in b_files) {
first_line_b_files <- readLines(file, n = 1)
cat("File: ", file, "\nFirst line: ", first_line_b_files, "\n")
}
# 9. Write a command that displays the first line of each of those “b” files (this is tricky… use a for-loop)
for (file in b_files) {
first_line_b_files <- readLines(file, n = 1)
cat("File name: ", file, "\nFirst line: ", first_line_b_files, "\n")
}
# 10. Do the same thing for all files that end in “.csv”
for (file in csv_files) {
first_line_csv_files <- readLines(file, n = 1)
cat("File name: ", file, "\nFirst line: ", first_line_csv_files, "\n")
}
library(palmerpenguins)
library(palmerpenguins)
library(penguin)
library(palmerpenguins)
library(palmerpenguin)
library(palmerpenguin)
library(palmerpenguins)
library(palmerpenguins)
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
View(penguins)
?penguins
?penguins
# 1.1. find the fattie penguins (body_mass > 5000)
penguins %>%
filter(body_mass_g > 5000) %>%
View()
# 1.1. find the fattie penguins (body_mass > 5000)
penguins %>%
filter(body_mass_g > 5000) %>%
View()
# 1.1. find the fattie penguins (body_mass > 5000)
penguins %>%
filter(body_mass_g > 5000) %>%
View()
penguins %>%
filter(body_mass_g > 5000) %>%
View()
library(tidyverse)
library(tidyverse)
# 1.1. find the fattie penguins (body_mass > 5000)
penguins %>%
filter(body_mass_g > 5000) %>%
View()
# 1.1. find the fattie penguins (body_mass > 5000)
penguins %>%
filter(body_mass_g > 5000) %>%
View()
fat_penguins <- penguins %>%
filter(body_mass_g > 5000) %>%
View()
rm fat_penguins
remove fat_penguins
remove(fat_penguins)
fat_penguins <- penguins %>%
filter(body_mass_g > 5000)
View(fat_penguins)
# 1.1. find the fat penguins (body_mass > 5000)
fat_penguins <- penguins |
filter(body_mass_g > 5000)
# 1.1. find the fat penguins (body_mass > 5000)
fat_penguins <- penguins %>%
filter(body_mass_g > 5000)
# 1.2. count how many are male and how many are female
fat_male <- fat_penguins %>%
filter(sex = male)
# 1.2. count how many are male and how many are female
fat_male <- fat_penguins %>%
filter(sex == male)
# 1.2. count how many are male and how many are female
fat_male <- fat_penguins %>%
filter(sex == male)
# 1.2. count how many are male and how many are female
fat_male <- fat_penguins %>%
filter(sex == "male")
View(fat_male)
penguins %>%
filter(body_mass_g > 5000)
fat_female <- fat_penguins %>%
filter(sex == "female")
View(fat_female)
# option 2:
penguins %>%
filter(body_mass_g > 5000) %>%
group_by(sex) %>%
summarise(count = n())
# 1.3. return the max body mass for male and female
penguins %>%
filter(body_mass_g > 5000) %>%
group_by(sex) %>%
summarise(count = n(),
fattest = max(body_mass_g))
max(penguins$body_mass_g, na.rm = T)
# max body mass full
max(penguins$body_mass_g, na.rm = T, sex == "female")
?summarize
# 1.3. return the max body mass for male and female
penguins %>%
filter(body_mass_g > 5000) %>%
group_by(sex) %>%
summarise(count = n(),
fattest = max(body_mass_g),
skinny_among_fatties = min(body_mass_g))
# 2.1. add new column to penguins to dataset that says whether they're fat
dat_peng <- penguins # dont want to mess up original data
dat_peng$fat_state <- dat_peng$body_mass_g > 5000
View(dat_peng)
dat_peng$fat_or_not <- dat_peng$body_mass_g > 5000
View(dat_peng)
remove(fat_state)
penguins %>%
filter(body_mass_g > 5000) %>%
mutate(fat_state = body_mass_g ) %>%
View()
dat_peng$fat_or_not <- dat_peng$body_mass_g > 5000
View(dat_peng)
-fat_state
dat_peng[, -"fat_state"]
remove(dat_peng)
# 2.1. add new column to penguins to dataset that says whether they're fat
dat_peng <- penguins # don't want to mess up original data
dat_peng$fat_or_not <- dat_peng$body_mass_g > 5000
View(dat_peng)
penguins %>%
filter(body_mass_g > 5000) %>%
mutate(fat_state = body_mass_g ) %>%
View()
# option 3:
penguins %>%
mutate(fat_or_not = case_when(body_mass_g > 5000 ~ 'fat',
body_mass_g <= 5000 & body_mass_g > 3000 ~ 'medium',
TRUE ~ 'skinny')) %>%
View()
?mutate
# option 3:
penguins %>%
mutate(fat_or_not = case_when(body_mass_g > 5000 ~ 'fat',
body_mass_g <= 5000 & body_mass_g > 3000 ~ 'medium',
body_mass_g <= 3000 ~ 'skinny',
TRUE ~ 'NA')) %>%
View()
dat <- penguins %>%
mutate(fat_or_not = case_when(body_mass_g > 5000 ~ 'fat',
body_mass_g <= 5000 & body_mass_g > 3000 ~ 'medium',
body_mass_g <= 3000 ~ 'skinny'))
plot(dat_peng$bill_length_mm, dat_peng$body_mass_g)
# install ggplot2
library(ggplot2)
?ggplot2
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g))
# basic and simple plot
plot(dat_peng$bill_length_mm, dat_peng$body_mass_g)
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_point()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_bar()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_point()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_point() +
geom_abline()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_point() +
geom_abline())
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_point() +
geom_abline()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g)) +
geom_point() +
geom_smooth()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g,
color = sex)) +
geom_point() +
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g,
color = sex)) +
geom_point() +
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g,
color = sex)) +
geom_point()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g,
color = sex)) +
geom_point()
dat_peng %>%
ggplot(aes(x = bill_length_mm,
y = body_mass_g,
color = sex,
shape = fat_or_not)) +
geom_point()
